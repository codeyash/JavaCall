/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "FtdcRiskUserApi.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnFrontConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  (arg1)->OnFrontConnected();
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnFrontDisconnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnFrontDisconnected(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnHeartBeatWarning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnHeartBeatWarning(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jboolean jarg4) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcRspInfoField *arg2 = (CShfeFtdcRspInfoField *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcRspInfoField **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->OnRspError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnBrokerDeposit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcBrokerDepositField *arg2 = (CShfeFtdcBrokerDepositField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcBrokerDepositField **)&jarg2; 
  (arg1)->OnRtnBrokerDeposit(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnClientSGDataSyncStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSettlementSessionField *arg2 = (CShfeFtdcSettlementSessionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSettlementSessionField **)&jarg2; 
  (arg1)->OnRtnClientSGDataSyncStart(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnClientSGDataSyncEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSettlementSessionField *arg2 = (CShfeFtdcSettlementSessionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSettlementSessionField **)&jarg2; 
  (arg1)->OnRtnClientSGDataSyncEnd(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspRiskUserLogin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcRspRiskUserLoginField *arg2 = (CShfeFtdcRspRiskUserLoginField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcRspRiskUserLoginField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspRiskUserLogin(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcProductField *arg2 = (CShfeFtdcProductField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcProductField **)&jarg2; 
  (arg1)->OnRtnProduct(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInstrumentField *arg2 = (CShfeFtdcInstrumentField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInstrumentField **)&jarg2; 
  (arg1)->OnRtnInstrument(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspQryOrderStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcOrderStatField *arg2 = (CShfeFtdcOrderStatField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcOrderStatField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryOrderStat(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnExchange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcExchangeField *arg2 = (CShfeFtdcExchangeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcExchangeField **)&jarg2; 
  (arg1)->OnRtnExchange(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnRiskDepthMarketData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcDepthMarketDataField *arg2 = (CShfeFtdcDepthMarketDataField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcDepthMarketDataField **)&jarg2; 
  (arg1)->OnRtnRiskDepthMarketData(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnTimeSync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcCurrentTimeField *arg2 = (CShfeFtdcCurrentTimeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcCurrentTimeField **)&jarg2; 
  (arg1)->OnRtnTimeSync(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspInstPositionRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcRspInstPositionRateField *arg2 = (CShfeFtdcRspInstPositionRateField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcRspInstPositionRateField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspInstPositionRate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspProductPositionRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcRspProductPositionRateField *arg2 = (CShfeFtdcRspProductPositionRateField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcRspProductPositionRateField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspProductPositionRate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnInvestorGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInvestorGroupField *arg2 = (CShfeFtdcInvestorGroupField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInvestorGroupField **)&jarg2; 
  (arg1)->OnRtnInvestorGroup(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnInstrumentMarginRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInstrumentMarginRateField *arg2 = (CShfeFtdcInstrumentMarginRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInstrumentMarginRateField **)&jarg2; 
  (arg1)->OnRtnInstrumentMarginRate(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnInstrumentMarginRateAdjust(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInstrumentMarginRateAdjustField *arg2 = (CShfeFtdcInstrumentMarginRateAdjustField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInstrumentMarginRateAdjustField **)&jarg2; 
  (arg1)->OnRtnInstrumentMarginRateAdjust(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnExchangeMarginRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcExchangeMarginRateField *arg2 = (CShfeFtdcExchangeMarginRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcExchangeMarginRateField **)&jarg2; 
  (arg1)->OnRtnExchangeMarginRate(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnExchangeMarginRateAdjust(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcExchangeMarginRateAdjustField *arg2 = (CShfeFtdcExchangeMarginRateAdjustField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcExchangeMarginRateAdjustField **)&jarg2; 
  (arg1)->OnRtnExchangeMarginRateAdjust(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnSequencialBrokerUserEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSequencialBrokerUserEventField *arg2 = (CShfeFtdcSequencialBrokerUserEventField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSequencialBrokerUserEventField **)&jarg2; 
  (arg1)->OnRtnSequencialBrokerUserEvent(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnSequencialTrade(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSequencialTradeField *arg2 = (CShfeFtdcSequencialTradeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSequencialTradeField **)&jarg2; 
  (arg1)->OnRtnSequencialTrade(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnSequencialOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSequencialOrderField *arg2 = (CShfeFtdcSequencialOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSequencialOrderField **)&jarg2; 
  (arg1)->OnRtnSequencialOrder(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspRiskOrderInsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInputOrderField *arg2 = (CShfeFtdcInputOrderField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInputOrderField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspRiskOrderInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspRiskOrderAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInputOrderActionField *arg2 = (CShfeFtdcInputOrderActionField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInputOrderActionField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspRiskOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnSequencialPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSequencialPositionField *arg2 = (CShfeFtdcSequencialPositionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSequencialPositionField **)&jarg2; 
  (arg1)->OnRtnSequencialPosition(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnDepartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcDepartmentField *arg2 = (CShfeFtdcDepartmentField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcDepartmentField **)&jarg2; 
  (arg1)->OnRtnDepartment(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspRiskParkedOrderInsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcRiskParkedOrderField *arg2 = (CShfeFtdcRiskParkedOrderField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcRiskParkedOrderField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspRiskParkedOrderInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspRemoveRiskParkedOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcRemoveRiskParkedOrderField *arg2 = (CShfeFtdcRemoveRiskParkedOrderField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcRemoveRiskParkedOrderField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspRemoveRiskParkedOrder(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnSeqRiskParkedOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSeqRiskParkedOrderField *arg2 = (CShfeFtdcSeqRiskParkedOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSeqRiskParkedOrderField **)&jarg2; 
  (arg1)->OnRtnSeqRiskParkedOrder(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspRiskUserPasswordUpd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcUserPasswordUpdateField *arg2 = (CShfeFtdcUserPasswordUpdateField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcUserPasswordUpdateField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspRiskUserPasswordUpd(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnSeqDeposit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSeqDepositField *arg2 = (CShfeFtdcSeqDepositField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSeqDepositField **)&jarg2; 
  (arg1)->OnRtnSeqDeposit(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnSeqTradingCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSeqTradingCodeField *arg2 = (CShfeFtdcSeqTradingCodeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSeqTradingCodeField **)&jarg2; 
  (arg1)->OnRtnSeqTradingCode(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnRiskInvestor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcRiskSyncInvestorField *arg2 = (CShfeFtdcRiskSyncInvestorField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcRiskSyncInvestorField **)&jarg2; 
  (arg1)->OnRtnRiskInvestor(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspQryInvestorLinkMan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInvestorLinkManField *arg2 = (CShfeFtdcInvestorLinkManField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInvestorLinkManField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryInvestorLinkMan(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnDelInstrumentMarginRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInstrumentMarginRateField *arg2 = (CShfeFtdcInstrumentMarginRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInstrumentMarginRateField **)&jarg2; 
  (arg1)->OnRtnDelInstrumentMarginRate(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnDelInstrumentMarginRateAdjust(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInstrumentMarginRateAdjustField *arg2 = (CShfeFtdcInstrumentMarginRateAdjustField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInstrumentMarginRateAdjustField **)&jarg2; 
  (arg1)->OnRtnDelInstrumentMarginRateAdjust(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnDelExchangeMarginRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcExchangeMarginRateField *arg2 = (CShfeFtdcExchangeMarginRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcExchangeMarginRateField **)&jarg2; 
  (arg1)->OnRtnDelExchangeMarginRate(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnDelExchangeMarginRateAdjust(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcExchangeMarginRateAdjustField *arg2 = (CShfeFtdcExchangeMarginRateAdjustField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcExchangeMarginRateAdjustField **)&jarg2; 
  (arg1)->OnRtnDelExchangeMarginRateAdjust(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspQryInvestorDepartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInvestorDepartmentFlatField *arg2 = (CShfeFtdcInvestorDepartmentFlatField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInvestorDepartmentFlatField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryInvestorDepartment(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnInvestorDepartmentHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInvestorLinkManHashField *arg2 = (CShfeFtdcInvestorLinkManHashField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInvestorLinkManHashField **)&jarg2; 
  (arg1)->OnRtnInvestorDepartmentHash(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnRiskSyncAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcRiskSyncAccountField *arg2 = (CShfeFtdcRiskSyncAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcRiskSyncAccountField **)&jarg2; 
  (arg1)->OnRtnRiskSyncAccount(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnSeqPreRiskAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSeqPreRiskAccountField *arg2 = (CShfeFtdcSeqPreRiskAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSeqPreRiskAccountField **)&jarg2; 
  (arg1)->OnRtnSeqPreRiskAccount(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnSeqBizNotice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSeqBizNoticeField *arg2 = (CShfeFtdcSeqBizNoticeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSeqBizNoticeField **)&jarg2; 
  (arg1)->OnRtnSeqBizNotice(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspRiskQryBrokerDeposit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcQueryBrokerDepositField *arg2 = (CShfeFtdcQueryBrokerDepositField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcQueryBrokerDepositField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspRiskQryBrokerDeposit(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRtnSeqRiskNotifyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcSeqRiskNotifyBField *arg2 = (CShfeFtdcSeqRiskNotifyBField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcSeqRiskNotifyBField **)&jarg2; 
  (arg1)->OnRtnSeqRiskNotifyB(arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspQryPositionStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcPositionStatField *arg2 = (CShfeFtdcPositionStatField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcPositionStatField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryPositionStat(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspQryTradeStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcTradeStatField *arg2 = (CShfeFtdcTradeStatField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcTradeStatField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryTradeStat(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserSpi_1OnRspInvestorLinkManHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  CShfeFtdcInvestorLinkManHashField *arg2 = (CShfeFtdcInvestorLinkManHashField *) 0 ;
  CShfeFtdcRspInfoField *arg3 = (CShfeFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  arg2 = *(CShfeFtdcInvestorLinkManHashField **)&jarg2; 
  arg3 = *(CShfeFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspInvestorLinkManHash(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_ctpapiJNI_new_1CShfeFtdcRiskUserSpi(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CShfeFtdcRiskUserSpi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CShfeFtdcRiskUserSpi *)new CShfeFtdcRiskUserSpi();
  *(CShfeFtdcRiskUserSpi **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_delete_1CShfeFtdcRiskUserSpi(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CShfeFtdcRiskUserSpi *arg1 = (CShfeFtdcRiskUserSpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CShfeFtdcRiskUserSpi **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1CreateFtdcRiskUserApi_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  CShfeFtdcRiskUserApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (CShfeFtdcRiskUserApi *)CShfeFtdcRiskUserApi::CreateFtdcRiskUserApi((char const *)arg1);
  *(CShfeFtdcRiskUserApi **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1CreateFtdcRiskUserApi_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CShfeFtdcRiskUserApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CShfeFtdcRiskUserApi *)CShfeFtdcRiskUserApi::CreateFtdcRiskUserApi();
  *(CShfeFtdcRiskUserApi **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1Release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  (arg1)->Init();
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1Join(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  result = (int)(arg1)->Join();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1GetTradingDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  result = (char *)(arg1)->GetTradingDay();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1RegisterFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->RegisterFront(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1RegisterSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcRiskUserSpi *arg2 = (CShfeFtdcRiskUserSpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcRiskUserSpi **)&jarg2; 
  (arg1)->RegisterSpi(arg2);
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqRiskUserLogin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcReqRiskUserLoginField *arg2 = (CShfeFtdcReqRiskUserLoginField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcReqRiskUserLoginField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqRiskUserLogin(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqQryOrderStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcQryStatField *arg2 = (CShfeFtdcQryStatField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcQryStatField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryOrderStat(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqSubRiskMarketData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcSubMarketDataField *arg2 = (CShfeFtdcSubMarketDataField *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcSubMarketDataField **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->ReqSubRiskMarketData(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqUnSubRiskMarketData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcSubMarketDataField *arg2 = (CShfeFtdcSubMarketDataField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcSubMarketDataField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqUnSubRiskMarketData(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqQryInstPositionRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcQryInstPositionRateField *arg2 = (CShfeFtdcQryInstPositionRateField *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcQryInstPositionRateField **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->ReqQryInstPositionRate(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqQryProductPositionRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcQryProductPositionRateField *arg2 = (CShfeFtdcQryProductPositionRateField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcQryProductPositionRateField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryProductPositionRate(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqSubscribeTrade(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcNotifySequenceField *arg2 = (CShfeFtdcNotifySequenceField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcNotifySequenceField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqSubscribeTrade(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqSubscribeOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcNotifySequenceField *arg2 = (CShfeFtdcNotifySequenceField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcNotifySequenceField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqSubscribeOrder(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqSubBrokerUserEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcNotifySequenceField *arg2 = (CShfeFtdcNotifySequenceField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcNotifySequenceField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqSubBrokerUserEvent(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqRiskOrderInsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcRiskForceCloseOrderField *arg2 = (CShfeFtdcRiskForceCloseOrderField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcRiskForceCloseOrderField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqRiskOrderInsert(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqRiskOrderAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcInputOrderActionField *arg2 = (CShfeFtdcInputOrderActionField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcInputOrderActionField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqRiskOrderAction(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqSubscribePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcNotifySequenceField *arg2 = (CShfeFtdcNotifySequenceField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcNotifySequenceField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqSubscribePosition(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqRiskParkedOrderInsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcRiskParkedOrderField *arg2 = (CShfeFtdcRiskParkedOrderField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcRiskParkedOrderField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqRiskParkedOrderInsert(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqRemoveRiskParkedOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcRemoveRiskParkedOrderField *arg2 = (CShfeFtdcRemoveRiskParkedOrderField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcRemoveRiskParkedOrderField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqRemoveRiskParkedOrder(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqSubRiskParkedOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcNotifySequenceField *arg2 = (CShfeFtdcNotifySequenceField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcNotifySequenceField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqSubRiskParkedOrder(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqRiskUserPasswordUpd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcUserPasswordUpdateField *arg2 = (CShfeFtdcUserPasswordUpdateField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcUserPasswordUpdateField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqRiskUserPasswordUpd(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqSubSeqDeposit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcRiskNtfSequenceField *arg2 = (CShfeFtdcRiskNtfSequenceField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcRiskNtfSequenceField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqSubSeqDeposit(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqSubSeqTradingCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcRiskNtfSequenceField *arg2 = (CShfeFtdcRiskNtfSequenceField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcRiskNtfSequenceField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqSubSeqTradingCode(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqQryInvestorLinkMan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcInvestorIDRangeField *arg2 = (CShfeFtdcInvestorIDRangeField *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcInvestorIDRangeField **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->ReqQryInvestorLinkMan(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqQryInvestorDepartment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcInvestorIDRangeField *arg2 = (CShfeFtdcInvestorIDRangeField *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcInvestorIDRangeField **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->ReqQryInvestorDepartment(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqSubPreRiskAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcRiskNtfSequenceField *arg2 = (CShfeFtdcRiskNtfSequenceField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcRiskNtfSequenceField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqSubPreRiskAccount(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqSubSeqData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcRiskNtfSequenceField *arg2 = (CShfeFtdcRiskNtfSequenceField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcRiskNtfSequenceField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqSubSeqData(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqRiskQryBrokerDeposit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcQueryBrokerDepositField *arg2 = (CShfeFtdcQueryBrokerDepositField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcQueryBrokerDepositField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqRiskQryBrokerDeposit(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqSubSeqRiskNotifyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcRiskNtfSequenceField *arg2 = (CShfeFtdcRiskNtfSequenceField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcRiskNtfSequenceField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqSubSeqRiskNotifyB(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqQryPositionStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcQryStatField *arg2 = (CShfeFtdcQryStatField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcQryStatField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryPositionStat(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqQryTradeStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcQryStatField *arg2 = (CShfeFtdcQryStatField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcQryStatField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryTradeStat(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ctpapiJNI_CShfeFtdcRiskUserApi_1ReqInvestorLinkManHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CShfeFtdcRiskUserApi *arg1 = (CShfeFtdcRiskUserApi *) 0 ;
  CShfeFtdcInvestorIDRangeField *arg2 = (CShfeFtdcInvestorIDRangeField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CShfeFtdcRiskUserApi **)&jarg1; 
  arg2 = *(CShfeFtdcInvestorIDRangeField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqInvestorLinkManHash(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

